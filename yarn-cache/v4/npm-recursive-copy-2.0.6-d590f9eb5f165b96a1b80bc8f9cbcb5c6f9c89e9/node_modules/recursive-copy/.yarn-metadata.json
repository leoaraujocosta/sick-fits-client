{
  "manifest": {
    "name": "recursive-copy",
    "version": "2.0.6",
    "description": "Simple, flexible file copy utility",
    "main": "index.js",
    "files": [
      "index.js",
      "lib"
    ],
    "scripts": {
      "test": "eslint index.js test && mocha --reporter spec"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/timkendrick/recursive-copy.git"
    },
    "keywords": [
      "copy",
      "recursive",
      "file",
      "directory",
      "folder",
      "symlink",
      "fs",
      "rename",
      "filter",
      "transform",
      "glob",
      "regex",
      "regexp"
    ],
    "author": {
      "name": "Tim Kendrick",
      "email": "timkendrick@gmail.com"
    },
    "license": "ISC",
    "bugs": {
      "url": "https://github.com/timkendrick/recursive-copy/issues"
    },
    "homepage": "https://github.com/timkendrick/recursive-copy",
    "dependencies": {
      "del": "^2.2.0",
      "emitter-mixin": "0.0.3",
      "errno": "^0.1.2",
      "graceful-fs": "^4.1.4",
      "junk": "^1.0.1",
      "maximatch": "^0.1.0",
      "mkdirp": "^0.5.1",
      "pify": "^2.3.0",
      "promise": "^7.0.1",
      "slash": "^1.0.0"
    },
    "devDependencies": {
      "chai": "^3.5.0",
      "chai-as-promised": "^5.3.0",
      "eslint": "^2.9.0",
      "mocha": "^2.4.5",
      "read-dir-files": "^0.1.1",
      "rewire": "^2.3.3",
      "through2": "^2.0.1"
    },
    "_registry": "npm",
    "_loc": "yarn-cache/v4/npm-recursive-copy-2.0.6-d590f9eb5f165b96a1b80bc8f9cbcb5c6f9c89e9/node_modules/recursive-copy/package.json",
    "readmeFilename": "README.md",
    "readme": "# recursive-copy\n[![npm version](https://img.shields.io/npm/v/recursive-copy.svg)](https://www.npmjs.com/package/recursive-copy)\n![Stability](https://img.shields.io/badge/stability-stable-brightgreen.svg)\n[![Build Status](https://travis-ci.org/timkendrick/recursive-copy.svg?branch=master)](https://travis-ci.org/timkendrick/recursive-copy)\n[![Windows Build Status](https://img.shields.io/appveyor/ci/timkendrick/recursive-copy/master.svg?label=windows%20build)](https://ci.appveyor.com/project/timkendrick/recursive-copy/branch/master)\n\n> Simple, flexible file copy utility\n\n\n## Features\n\n- Recursively copy whole directory hierarchies\n- Choose which files are copied by passing a filter function, regular expression or glob\n- Rename files dynamically, including changing the output path\n- Transform file contents using streams\n- Choose whether to overwrite existing files\n- Choose whether to copy system files\n- Filters out [junk](https://www.npmjs.com/package/junk) files by default\n- Uses [graceful-fs](https://www.npmjs.com/package/graceful-fs) and [mkdirp](https://www.npmjs.com/package/mkdirp) to avoid filesystem errors\n- Emits start, finish and error events for each file that is processed\n- Optional promise-based interface\n\n## Examples\n\n#### Node-style callback interface\n\n```javascript\nvar copy = require('recursive-copy');\n\ncopy('src', 'dest', function(error, results) {\n\tif (error) {\n\t\tconsole.error('Copy failed: ' + error);\n\t} else {\n\t\tconsole.info('Copied ' + results.length + ' files');\n\t}\n});\n```\n\n#### Promise interface\n\n```javascript\nvar copy = require('recursive-copy');\n\ncopy('src', 'dest')\n\t.then(function(results) {\n\t\tconsole.info('Copied ' + results.length + ' files');\n\t})\n\t.catch(function(error) {\n\t\tconsole.error('Copy failed: ' + error);\n\t});\n```\n\n#### Advanced options\n\n```javascript\nvar copy = require('recursive-copy');\n\nvar path = require('path');\nvar through = require('through2');\n\nvar options = {\n\toverwrite: true,\n\texpand: true,\n\tdot: true,\n\tjunk: true,\n\tfilter: [\n\t\t'**/*',\n\t\t'!.htpasswd'\n\t],\n\trename: function(filePath) {\n\t\treturn filePath + '.orig';\n\t},\n\ttransform: function(src, dest, stats) {\n\t\tif (path.extname(src) !== '.txt') { return null; }\n\t\treturn through(function(chunk, enc, done)  {\n\t\t\tvar output = chunk.toString().toUpperCase();\n\t\t\tdone(null, output);\n\t\t});\n\t}\n};\n\ncopy('src', 'dest', options)\n\t.on(copy.events.COPY_FILE_START, function(copyOperation) {\n\t\tconsole.info('Copying file ' + copyOperation.src + '...');\n\t})\n\t.on(copy.events.COPY_FILE_COMPLETE, function(copyOperation) {\n\t\tconsole.info('Copied to ' + copyOperation.dest);\n\t})\n\t.on(copy.events.ERROR, function(error, copyOperation) {\n\t\tconsole.error('Unable to copy ' + copyOperation.dest);\n\t})\n\t.then(function(results) {\n\t\tconsole.info(results.length + ' file(s) copied');\n\t})\n\t.catch(function(error) {\n\t\treturn console.error('Copy failed: ' + error);\n\t});\n```\n\n\n## Usage\n\n### `copy(src, dest, [options], [callback])`\n\nRecursively copy files and folders from `src` to `dest`\n\n#### Arguments:\n\n| Name | Type | Required | Default | Description |\n| ---- | ---- | -------- | ------- | ----------- |\n| `src` | `string` | Yes | N/A | Source file/folder path |\n| `dest` | `string` | Yes | N/A | Destination file/folder path |\n| `options.overwrite` | `boolean` | No | `false` | Whether to overwrite destination files |\n| `options.expand` | `boolean` | No | `false` | Whether to expand symbolic links |\n| `options.dot` | `boolean` | No | `false` | Whether to copy files beginning with a `.` |\n| `options.junk` | `boolean` | No | `false` | Whether to copy OS junk files (e.g. `.DS_Store`, `Thumbs.db`) |\n| `options.filter` | `function`, `RegExp`, `string`, `array` | No | `null` | Filter function / regular expression / glob that determines which files to copy (uses [maximatch](https://www.npmjs.com/package/maximatch)) |\n| `options.rename` | `function` | No | `null` | Function that maps source paths to destination paths |\n| `options.transform` | `function` | No | `null` | Function that returns a transform stream used to modify file contents |\n| `callback` | `function` | No | `null` | Callback, invoked on success/failure |\n\n\n#### Returns:\n\n`Promise<Array>` Promise, fulfilled with array of copy results:\n\n```json\n[\n\t{\n\t\t\"src\": \"/path/to/src\",\n\t\t\"dest\": \"/path/to/dest\",\n\t\t\"stats\": <Stats>\n\t},\n\t{\n\t\t\"src\": \"/path/to/src/file.txt\",\n\t\t\"dest\": \"/path/to/dest/file.txt\",\n\t\t\"stats\": <Stats>\n\t},\n\t{\n\t\t\"src\": \"/path/to/src/subfolder\",\n\t\t\"dest\": \"/path/to/dest/subfolder\",\n\t\t\"stats\": <Stats>\n\t},\n\t{\n\t\t\"src\": \"/path/to/src/subfolder/nested.txt\",\n\t\t\"dest\": \"/path/to/dest/subfolder/nested.txt\",\n\t\t\"stats\": <Stats>\n\t}\n]\n```\n\n## Events\n\nThe value returned by the `copy` function implements the `EventEmitter` interface, and emits the following events:\n\n| Event | Handler signature |\n| ----- | ----------------- |\n| `copy.events.ERROR` | `function(error, ErrorInfo)` |\n| `copy.events.COMPLETE` | `function(Array<CopyOperation>)` |\n| `copy.events.CREATE_DIRECTORY_START` | `function(CopyOperation)` |\n| `copy.events.CREATE_DIRECTORY_ERROR` | `function(error, CopyOperation)` |\n| `copy.events.CREATE_DIRECTORY_COMPLETE` | `function(CopyOperation)` |\n| `copy.events.CREATE_SYMLINK_START` | `function(CopyOperation)` |\n| `copy.events.CREATE_SYMLINK_ERROR` | `function(error, CopyOperation)` |\n| `copy.events.CREATE_SYMLINK_COMPLETE` | `function(CopyOperation)` |\n| `copy.events.COPY_FILE_START` | `function(CopyOperation)` |\n| `copy.events.COPY_FILE_ERROR` | `function(error, CopyOperation)` |\n| `copy.events.COPY_FILE_COMPLETE` | `function(CopyOperation)` |\n\n...where the types referred to in the handler signature are as follows:\n\n### `ErrorInfo`\n\n| Property | Type | Description |\n| -------- | ---- | ----------- |\n| `src` | `string` | Source path of the file/folder/symlink that failed to copy |\n| `dest` | `string` | Destination path of the file/folder/symlink that failed to copy |\n\n### `CopyOperation`\n\n| Property | Type | Description |\n| -------- | ---- | ----------- |\n| `src` | `string` | Source path of the relevant file/folder/symlink |\n| `dest` | `string` | Destination path of the relevant file/folder/symlink |\n| `stats ` | `fs.Stats` | Stats for the relevant file/folder/symlink |\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/recursive-copy/-/recursive-copy-2.0.6.tgz#d590f9eb5f165b96a1b80bc8f9cbcb5c6f9c89e9",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/recursive-copy/-/recursive-copy-2.0.6.tgz",
    "hash": "d590f9eb5f165b96a1b80bc8f9cbcb5c6f9c89e9",
    "integrity": "sha1-1ZD5618WW5ahuAvI+cvLXG+ciek=",
    "registry": "npm",
    "packageName": "recursive-copy"
  },
  "registry": "npm",
  "hash": "d590f9eb5f165b96a1b80bc8f9cbcb5c6f9c89e9"
}