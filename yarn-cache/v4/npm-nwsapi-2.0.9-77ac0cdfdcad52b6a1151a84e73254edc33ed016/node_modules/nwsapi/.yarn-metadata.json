{
  "manifest": {
    "name": "nwsapi",
    "version": "2.0.9",
    "description": "Fast CSS Selectors API Engine",
    "homepage": "http://javascript.nwbox.com/nwsapi/",
    "main": "./src/nwsapi",
    "keywords": [
      "css",
      "css3",
      "css4",
      "matcher",
      "selector"
    ],
    "licenses": [
      {
        "type": "MIT",
        "url": "http://javascript.nwbox.com/nwsapi/MIT-LICENSE"
      }
    ],
    "license": "MIT",
    "author": {
      "name": "Diego Perini",
      "email": "diego.perini@gmail.com",
      "url": "http://www.iport.it/"
    },
    "maintainers": [
      {
        "name": "Diego Perini",
        "email": "diego.perini@gmail.com",
        "url": "http://www.iport.it/"
      }
    ],
    "bugs": {
      "url": "http://github.com/dperini/nwsapi/issues"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/dperini/nwsapi.git"
    },
    "scripts": {
      "lint": "eslint ./src/nwsapi.js"
    },
    "devDependencies": {
      "eslint": "^4.19.1"
    },
    "_registry": "npm",
    "_loc": "yarn-cache/v4/npm-nwsapi-2.0.9-77ac0cdfdcad52b6a1151a84e73254edc33ed016/node_modules/nwsapi/package.json",
    "readmeFilename": "README.md",
    "readme": "# [NWSAPI](http://dperini.github.io/nwsapi/)\n\nFast CSS Selectors API Engine\n\nNWSAPI is the development progress of [NWMATCHER](https://github.com/dperini/nwmatcher) aiming at [Selectors Level 4](https://www.w3.org/TR/selectors-4/) conformance. It has been completely reworked to be easily extended and maintained. It is a right-to-left selector parser and compiler written in pure Javascript with no external dependencies. It was initially thought as a cross browser library to improve event delegation and web page scraping in various frameworks but it has become a popular replacement of the native CSS selection and matching functionality in newer browsers and headless environments.\n\nIt uses [regular expressions](https://en.wikipedia.org/wiki/Regular_expression) to parse CSS selector strings and [metaprogramming](https://en.wikipedia.org/wiki/Metaprogramming) to transforms these selector strings into Javascript function resolvers. This process is executed only once for each selector string allowing memoization of the function resolvers and achieving unmatched performances.\n\n## Installation\n\nTo include NWSAPI in a standard web page:\n\n```html\n<script type=\"text/javascript\" src=\"nwsapi.js\"></script>\n```\n\nTo include NWSAPI in a standard web page and automatically replace the native QSA:\n\n```html\n<script type=\"text/javascript\" src=\"nwsapi.js\" onload=\"NW.Dom.install()\"></script>\n```\n\nTo use it with Node.js:\n\n```\n$ npm install nwsapi\n```\n\nNWSAPI currently supports browsers (as a global, `NW.Dom`) and headless environments (as a CommonJS module).\n\n\n## Supported Selectors\n\nHere is a list of all the CSS2/CSS3/CSS4 [Supported selectors](https://github.com/dperini/nwsapi/wiki/CSS-supported-selectors).\n\n\n## Features and Compliance\n\nYou can read more about NWSAPI [features and compliance](https://github.com/dperini/nwsapi/wiki/Features-and-compliance) on the wiki.\n\n\n## API\n\n### DOM Selection\n\n#### `ancestor( selector, context, callback )`\n\nReturns a reference to the nearest ancestor element matching `selector`, starting at `context`. Returns `null` if no element is found. If `callback` is provided, it is invoked for the matched element.\n\n#### `first( selector, context, callback )`\n\nReturns a reference to the first element matching `selector`, starting at `context`. Returns `null` if no element matches. If `callback` is provided, it is invoked for the matched element.\n\n#### `match( selector, element, callback )`\n\nReturns `true` if `element` matches `selector`, starting at `context`; returns `false` otherwise. If `callback` is provided, it is invoked for the matched element.\n\n#### `select( selector, context, callback )`\n\nReturns an array of all the elements matching `selector`, starting at `context`; returns empty `Array` otherwise. If `callback` is provided, it is invoked for each matching element.\n\n\n### DOM Helpers\n\n#### `byId( id, from )`\n\nReturns a reference to the first element with ID `id`, optionally filtered to descendants of the element `from`.\n\n#### `byTag( tag, from )`\n\nReturns an array of elements having the specified tag name `tag`, optionally filtered to descendants of the element `from`.\n\n#### `byClass( class, from )`\n\nReturns an array of elements having the specified class name `class`, optionally filtered to descendants of the element `from`.\n\n\n### Engine Configuration\n\n#### `configure( options )`\n\nThe following is the list of currently available configuration options, their default values and descriptions, they are boolean flags that can be set to `true` or `false`:\n\n* `BUGFIX_ID`: true  - true to bugfix forms when using reserved words for controls\n* `SIMPLENOT`: true  - true to disallow complex selectors nested in ':not()' classes\n* `USE_HTML5`: true  - true to use HTML5 specs for \":checked\" and similar UI states\n* `VERBOSITY`: true  - true to throw exceptions, false to skip throwing exceptions\n* `LOGERRORS`: true  - true to print console errors or warnings, false to mute them\n\nExample:\n\n```js\nNW.Dom.configure( { LOGERRORS: false, VERBOSITY: false } );\n```\n\n#### `registerCombinator( symbol, resolver )`\n\nRegisters a new symbol and its matching resolver in the combinators table.\n\n#### `registerOperator( symbol, resolver )`\n\nRegisters a new symbol and its matching resolver in the attribute operators table. Example:\n\n```js\nNW.Dom.registerOperator( '!=', { p1: '^', p2: '$', p3: 'false' } );\n```\n\n#### `registerSelector( name, rexp, func )`\n\nRegisters a new selector, with the matching regular expression and the appropriate resolver function, in the selectors table.\n",
    "licenseText": "Copyright (c) 2007-2018 Diego Perini (http://www.iport.it/)\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/nwsapi/-/nwsapi-2.0.9.tgz#77ac0cdfdcad52b6a1151a84e73254edc33ed016",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/nwsapi/-/nwsapi-2.0.9.tgz",
    "hash": "77ac0cdfdcad52b6a1151a84e73254edc33ed016",
    "integrity": "sha512-nlWFSCTYQcHk/6A9FFnfhKc14c3aFhfdNBXgo8Qgi9QTBu/qg3Ww+Uiz9wMzXd1T8GFxPc2QIHB6Qtf2XFryFQ==",
    "registry": "npm",
    "packageName": "nwsapi"
  },
  "registry": "npm",
  "hash": "77ac0cdfdcad52b6a1151a84e73254edc33ed016"
}