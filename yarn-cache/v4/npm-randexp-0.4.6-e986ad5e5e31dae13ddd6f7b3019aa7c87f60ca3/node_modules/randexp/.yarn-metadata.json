{
  "manifest": {
    "name": "randexp",
    "description": "Create random strings that match a given regular expression.",
    "keywords": [
      "regex",
      "regexp",
      "regular expression",
      "random",
      "test"
    ],
    "version": "0.4.6",
    "homepage": "http://fent.github.io/randexp.js/",
    "repository": {
      "type": "git",
      "url": "git://github.com/fent/randexp.js.git"
    },
    "author": {
      "name": "Roly Fentanes",
      "url": "https://github.com/fent"
    },
    "main": "./lib/randexp.js",
    "files": [
      "lib"
    ],
    "scripts": {
      "version": "gulp build && git add build",
      "test": "istanbul cover node_modules/.bin/_mocha -- test/*-test.js"
    },
    "dependencies": {
      "discontinuous-range": "1.0.0",
      "ret": "~0.1.10"
    },
    "devDependencies": {
      "browserify": "^14.0.0",
      "gulp": "^3.9.0",
      "gulp-header": "^1.7.1",
      "gulp-insert": "^0.5.0",
      "gulp-uglify": "^3.0.0",
      "istanbul": "*",
      "mocha": "*",
      "vinyl-buffer": "^1.0.0",
      "vinyl-source-stream": "^1.1.0"
    },
    "engines": {
      "node": ">=0.12"
    },
    "license": "MIT",
    "_registry": "npm",
    "_loc": "yarn-cache/v4/npm-randexp-0.4.6-e986ad5e5e31dae13ddd6f7b3019aa7c87f60ca3/node_modules/randexp/package.json",
    "readmeFilename": "README.md",
    "readme": "# randexp.js\n\nrandexp will generate a random string that matches a given RegExp Javascript object.\n\n[![Build Status](https://secure.travis-ci.org/fent/randexp.js.svg)](http://travis-ci.org/fent/randexp.js)\n[![Dependency Status](https://david-dm.org/fent/randexp.js.svg)](https://david-dm.org/fent/randexp.js)\n[![codecov](https://codecov.io/gh/fent/randexp.js/branch/master/graph/badge.svg)](https://codecov.io/gh/fent/randexp.js)\n\n# Usage\n\n```js\nvar RandExp = require('randexp');\n\n// supports grouping and piping\nnew RandExp(/hello+ (world|to you)/).gen();\n// => hellooooooooooooooooooo world\n\n// sets and ranges and references\nnew RandExp(/<([a-z]\\w{0,20})>foo<\\1>/).gen();\n// => <m5xhdg>foo<m5xhdg>\n\n// wildcard\nnew RandExp(/random stuff: .+/).gen();\n// => random stuff: l3m;Hf9XYbI [YPaxV>U*4-_F!WXQh9>;rH3i l!8.zoh?[utt1OWFQrE ^~8zEQm]~tK\n\n// ignore case\nnew RandExp(/xxx xtreme dragon warrior xxx/i).gen();\n// => xxx xtReME dRAGON warRiOR xXX\n\n// dynamic regexp shortcut\nnew RandExp('(sun|mon|tue|wednes|thurs|fri|satur)day', 'i');\n// is the same as\nnew RandExp(new RegExp('(sun|mon|tue|wednes|thurs|fri|satur)day', 'i'));\n```\n\nIf you're only going to use `gen()` once with a regexp and want slightly shorter syntax for it\n\n```js\nvar randexp = require('randexp').randexp;\n\nrandexp(/[1-6]/); // 4\nrandexp('great|good( job)?|excellent'); // great\n```\n\nIf you miss the old syntax\n\n```js\nrequire('randexp').sugar();\n\n/yes|no|maybe|i don't know/.gen(); // maybe\n```\n\n# Motivation\n\nRegular expressions are used in every language, every programmer is familiar with them. Regex can be used to easily express complex strings. What better way to generate a random string than with a language you can use to express the string you want?\n\nThanks to [String-Random](http://search.cpan.org/~steve/String-Random-0.22/lib/String/Random.pm) for giving me the idea to make this in the first place and [randexp](https://github.com/benburkert/randexp) for the sweet `.gen()` syntax.\n\n# Default Range\n\nThe default generated character range includes printable ASCII.  In order to add or remove characters,\na `defaultRange` attribute is exposed. you can `subtract(from, to)` and `add(from, to)`\n```js\nvar randexp = new RandExp(/random stuff: .+/);\nrandexp.defaultRange.subtract(32, 126);\nrandexp.defaultRange.add(0, 65535);\nrandexp.gen();\n// => random stuff: 湐箻ໜ䫴␩⶛㳸長���邓蕲뤀쑡篷皇硬剈궦佔칗븛뀃匫鴔事좍ﯣ⭼ꝏ䭍詳蒂䥂뽭\n```\n\n# Custom PRNG\n\nThe default randomness is provided by `Math.random()`. If you need to use a seedable or cryptographic PRNG, you\ncan override `RandExp.prototype.randInt` or `randexp.randInt` (where `randexp` is an instance of `RandExp`). `randInt(from, to)` accepts an inclusive range and returns a randomly selected\nnumber within that range.\n\n# Infinite Repetitionals\n\nRepetitional tokens such as `*`, `+`, and `{3,}` have an infinite max range. In this case, randexp looks at its min and adds 100 to it to get a useable max value. If you want to use another int other than 100 you can change the `max` property in `RandExp.prototype` or the RandExp instance.\n\n```js\nvar randexp = new RandExp(/no{1,}/);\nrandexp.max = 1000000;\n```\n\nWith `RandExp.sugar()`\n\n```js\nvar regexp = /(hi)*/;\nregexp.max = 1000000;\n```\n\n# Bad Regular Expressions\n\nThere are some regular expressions which can never match any string.\n\n* Ones with badly placed positionals such as `/a^/` and `/$c/m`. Randexp will ignore positional tokens.\n\n* Back references to non-existing groups like `/(a)\\1\\2/`. Randexp will ignore those references, returning an empty string for them. If the group exists only after the reference is used such as in `/\\1 (hey)/`, it will too be ignored.\n\n* Custom negated character sets with two sets inside that cancel each other out. Example: `/[^\\w\\W]/`. If you give this to randexp, it will return an empty string for this set since it can't match anything.\n\n\n# Projects based on randexp.js\n\n\n## JSON-Schema Faker\n\nUse generators to populate JSON Schema samples. See: [jsf on github](https://github.com/json-schema-faker/json-schema-faker/) and [jsf demo page](http://json-schema-faker.js.org/).\n\n\n# Install\n\n### Node.js\n\n    npm install randexp\n\n### Browser\n\nDownload the [minified version](https://github.com/fent/randexp.js/releases) from the latest release.\n\n\n# Tests\n\nTests are written with [mocha](https://mochajs.org)\n\n```bash\nnpm test\n```\n\n\n# License\n\nMIT\n",
    "licenseText": "Copyright (C) 2011 by Roly Fentanes\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. \n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/randexp/-/randexp-0.4.6.tgz#e986ad5e5e31dae13ddd6f7b3019aa7c87f60ca3",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/randexp/-/randexp-0.4.6.tgz",
    "hash": "e986ad5e5e31dae13ddd6f7b3019aa7c87f60ca3",
    "integrity": "sha512-80WNmd9DA0tmZrw9qQa62GPPWfuXJknrmVmLcxvq4uZBdYqb1wYoKTmnlGUchvVWe0XiLupYkBoXVOxz3C8DYQ==",
    "registry": "npm",
    "packageName": "randexp"
  },
  "registry": "npm",
  "hash": "e986ad5e5e31dae13ddd6f7b3019aa7c87f60ca3"
}