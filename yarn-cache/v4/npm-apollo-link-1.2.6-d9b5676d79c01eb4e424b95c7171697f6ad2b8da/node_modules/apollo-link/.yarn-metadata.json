{
  "manifest": {
    "name": "apollo-link",
    "version": "1.2.6",
    "description": "Flexible, lightweight transport layer for GraphQL",
    "author": {
      "name": "Evans Hauser",
      "email": "evanshauser@gmail.com"
    },
    "contributors": [
      {
        "name": "James Baxley",
        "email": "james@meteor.com"
      },
      {
        "name": "Jonas Helfer",
        "email": "jonas@helfer.email"
      },
      {
        "name": "jon wong",
        "email": "j@jnwng.com"
      },
      {
        "name": "Sashko Stubailo",
        "email": "sashko@stubailo.com"
      }
    ],
    "license": "MIT",
    "main": "./lib/bundle.umd.js",
    "module": "./lib/index.js",
    "jsnext:main": "./lib/index.js",
    "typings": "./lib/index.d.ts",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/apollographql/apollo-link.git"
    },
    "bugs": {
      "url": "https://github.com/apollographql/apollo-link/issues"
    },
    "homepage": "https://github.com/apollographql/apollo-link#readme",
    "scripts": {
      "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-utilities --i graphql --i zen-observable-ts && npm run minify:browser",
      "build": "tsc -p .",
      "bundle": "rollup -c",
      "clean": "rimraf lib/* && rimraf coverage/*",
      "coverage": "jest --coverage",
      "filesize": "npm run build && npm run build:browser",
      "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
      "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
      "postbuild": "npm run bundle",
      "prebuild": "npm run clean",
      "prepublishOnly": "npm run clean && npm run build",
      "test": "jest",
      "watch": "tsc -w -p . & rollup -c -w"
    },
    "dependencies": {
      "apollo-utilities": "^1.0.0",
      "zen-observable-ts": "^0.8.13"
    },
    "peerDependencies": {
      "graphql": "^0.11.3 || ^0.12.3 || ^0.13.0 || ^14.0.0"
    },
    "devDependencies": {
      "@types/graphql": "14.0.3",
      "@types/jest": "22.2.3",
      "@types/node": "9.6.40",
      "browserify": "16.2.3",
      "graphql": "14.0.2",
      "graphql-tag": "2.10.0",
      "jest": "22.4.4",
      "rimraf": "2.6.1",
      "rollup": "0.67.4",
      "ts-jest": "22.4.6",
      "tslint": "5.11.0",
      "typescript": "3.0.3",
      "uglify-js": "3.4.9"
    },
    "jest": {
      "transform": {
        ".(ts|tsx)": "ts-jest"
      },
      "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
      "moduleFileExtensions": [
        "ts",
        "tsx",
        "js",
        "json"
      ],
      "mapCoverage": true,
      "testURL": "http://localhost"
    },
    "_registry": "npm",
    "_loc": "yarn-cache/v4/npm-apollo-link-1.2.6-d9b5676d79c01eb4e424b95c7171697f6ad2b8da/node_modules/apollo-link/package.json",
    "readmeFilename": "README.md",
    "readme": "# apollo-link\n\n## Purpose\n\n`apollo-link` is a standard interface for modifying control flow of GraphQL requests and fetching GraphQL results, designed to provide a simple GraphQL client that is capable of extensions.\nThe targeted use cases of `apollo-link` are highlighted below:\n\n* fetch queries directly without normalized cache\n* network interface for Apollo Client\n* network interface for Relay Modern\n* fetcher for\n\nApollo Link is the interface for creating new links in your application.\n\nThe client sends a request as a method call to a link and can recieve one or more (in the case of subscriptions) responses from the server. The responses are returned using the Observer pattern.\n\n![Apollo Link Chain](https://cdn-images-1.medium.com/max/1600/1*62VLGUaU-9ULCoBCGvgdkQ.png)\n\nResults from the server can be provided by calling `next(result)` on the observer. In the case of a network/transport error (not a GraphQL Error) the `error(err)` method can be used to indicate a response will not be recieved. If multiple responses are not supported by the link, `complete()` should be called to inform the client no further data will be provided.\n\nIn the case of an intermediate link, a second argument to `request(operation, forward)` is the link to `forward(operation)` to. `forward` returns an observable and it can be returned directly or subscribed to.\n\n```js\nforward(operation).subscribe({\n  next: result => {\n    handleTheResult(result)\n  },\n  error: error => {\n    handleTheNetworkError(error)\n  },\n});\n```\n\n## Implementing a basic custom transport\n\n```js\nclass import { ApolloLink, Observable } from 'apollo-link';\n\nexport class CustomApolloLink extends ApolloLink {\n  request(operation /*, forward*/) {\n    //Whether no one is listening anymore\n    let unsubscribed = false;\n\n    return new Observable(observer => {\n      somehowGetOperationToServer(operation, (error, result) => {\n        if (unsubscribed) return;\n        if (error) {\n          //Network error\n          observer.error(error);\n        } else {\n          observer.next(result);\n          observer.complete(); //If subscriptions not supported\n        }\n      });\n\n      function unsubscribe() {\n        unsubscribed = true;\n      }\n\n      return unsubscribe;\n    });\n  }\n}\n```\n\n## Installation\n\n`npm install apollo-link --save`\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/apollo-link/-/apollo-link-1.2.6.tgz#d9b5676d79c01eb4e424b95c7171697f6ad2b8da",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/apollo-link/-/apollo-link-1.2.6.tgz",
    "hash": "d9b5676d79c01eb4e424b95c7171697f6ad2b8da",
    "integrity": "sha512-sUNlA20nqIF3gG3F8eyMD+mO80fmf3dPZX+GUOs3MI9oZR8ug09H3F0UsWJMcpEg6h55Yy5wZ+BMmAjrbenF/Q==",
    "registry": "npm",
    "packageName": "apollo-link"
  },
  "registry": "npm",
  "hash": "d9b5676d79c01eb4e424b95c7171697f6ad2b8da"
}