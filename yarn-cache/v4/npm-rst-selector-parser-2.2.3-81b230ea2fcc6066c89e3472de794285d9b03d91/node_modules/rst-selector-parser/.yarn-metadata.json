{
  "manifest": {
    "author": {
      "name": "Gajus Kuizinas",
      "email": "gajus@gajus.com",
      "url": "http://gajus.com"
    },
    "ava": {
      "babel": "inherit",
      "require": [
        "babel-register"
      ]
    },
    "dependencies": {
      "lodash.flattendeep": "^4.4.0",
      "nearley": "^2.7.10"
    },
    "description": "A CSS-based selector parser for React Standard Tree (RST) traversal",
    "devDependencies": {
      "ava": "^0.17.0",
      "babel-cli": "^6.22.2",
      "babel-loader": "^6.2.10",
      "babel-plugin-transform-flow-comments": "^6.22.0",
      "babel-preset-env": "^1.1.8",
      "babel-register": "^6.22.0",
      "eslint": "^3.13.1",
      "eslint-config-canonical": "^7.1.0",
      "flow-bin": "^0.38.0",
      "husky": "^0.13.0-1",
      "semantic-release": "^6.3.2",
      "webpack": "^2.2.0"
    },
    "keywords": [
      "css",
      "selector",
      "parser"
    ],
    "license": "BSD-3-Clause",
    "main": "./dist/index.js",
    "name": "rst-selector-parser",
    "repository": {
      "type": "git",
      "url": "https://github.com/aweary/rst-selector-parser"
    },
    "scripts": {
      "build": "npm run compile-grammar && babel ./src --out-dir ./dist --copy-files --source-maps",
      "compile-grammar": "nearleyc ./src/grammar.ne --out ./src/grammar.js",
      "lint": "eslint ./src ./test && flow",
      "precommit": "npm run lint && npm run test",
      "test": "ava --verbose"
    },
    "version": "2.2.3",
    "_registry": "npm",
    "_loc": "yarn-cache/v4/npm-rst-selector-parser-2.2.3-81b230ea2fcc6066c89e3472de794285d9b03d91/node_modules/rst-selector-parser/package.json",
    "readmeFilename": "README.md",
    "readme": "# rst-selector-parser\n\nThis is a fork of [scalpel](https://github.com/gajus/scalpel/) intended for use with [enzyme](https://github.com/airbnb/enzyme/) for traversing\na React Standard Tree (RST) using [CSS selectors](https://www.w3.org/TR/css3-selectors/), with minor divergences.\n\n* [Usage](#usage)\n* [Token types](#token-types)\n* [Fields](#fields)\n  * [`adjacentSiblingCombinator`](#adjacentsiblingcombinator)\n  * [`attributePresenceSelector`](#attributepresenceselector)\n  * [`attributeValueSelector`](#attributevalueselector)\n  * [`childCombinator`](#childcombinator)\n  * [`classSelector`](#classselector)\n  * [`descendantCombinator`](#descendantcombinator)\n  * [`generalSiblingCombinator`](#generalsiblingcombinator)\n  * [`idSelector`](#idselector)\n  * [`pseudoClassSelector`](#pseudoclassselector)\n  * [`pseudoElementSelector`](#pseudoelementselector)\n  * [`typeSelector`](#typeselector)\n  * [`universalSelector`](#universalselector)\n* [Development](#development)\n\n## Usage\n\n```js\nimport {\n  createGenerator,\n  createParser\n} from 'rst-selector-parser';\n\nconst generator = createGenerator();\nconst parser = createParser();\n\nconst tokens: Array<SelectorTokenType | CombinatorTokenType> = parser.parse('.foo.bar');\n\n// [\n//   {\n//     type: 'selector',\n//     body: [\n//       {\n//         type: 'classSelector',\n//         name: 'foo'\n//       },\n//       {\n//         type: 'classSelector',\n//         name: 'bar'\n//       }\n//     ]\n//   }\n// ]\n\nconst selector: string = generator.generate(token);\n\n// .foo.bar\n\n```\n\n> Note:\n>\n> For programmatic type definitions, refer to [`./src/types.js`](./src/types.js).\n\n## Token types\n\n|Type|Description|Example|\n|---|---|---|\n|[`adjacentSiblingCombinator`](#adjacentsiblingcombinator)|An [adjacent sibling combinator](https://www.w3.org/TR/css3-selectors/#adjacent-sibling-combinators).|`.baz0 + .baz1`|\n|[`attributePresenceSelector`](#attributepresenceselector)|An [attribute presence selector](https://www.w3.org/TR/css3-selectors/#attribute-selectors).|`[qux]`|\n|[`attributeValueSelector`](#attributevalueselector)|An [attribute value selector](https://www.w3.org/TR/css3-selectors/#attribute-selectors).|`[qux=val]`, `[qux~=val]`|\n|[`childCombinator`](#childcombinator)|A [child combinator](https://www.w3.org/TR/css3-selectors/#child-combinators).|`.baz0 > .baz1`|\n|[`classSelector`](#classselector)|A [class selector](https://www.w3.org/TR/css3-selectors/#class-html).|`.baz`|\n|[`descendantCombinator`](#descendantcombinator)|A [descendant combinator](https://www.w3.org/TR/css3-selectors/#descendant-combinators).|`.baz0 .baz1`|\n|[`generalSiblingCombinator`](#generalsiblingcombinator)|A [general sibling combinator](https://www.w3.org/TR/css3-selectors/#general-sibling-combinators).|`.baz0 ~ .baz1`|\n|[`idSelector`](#idselector)|An [ID selector](https://www.w3.org/TR/css3-selectors/#id-selectors)|`#bar`|\n|[`pseudoClassSelector`](#pseudoclassselector)|A [pseudo-class selector](https://www.w3.org/TR/css3-selectors/#pseudo-classes).|`:corge`, `:corge()`, `:corge(val0, 'val1', \"val2\")`|\n|[`pseudoElementSelector`](#pseudoelementselector)|A [pseudo-element selector](https://www.w3.org/TR/css3-selectors/#pseudo-elements).|`::grault`|\n|[`typeSelector`](#typeselector)|A [type selector](https://www.w3.org/TR/css3-selectors/#type-selectors).|`foo`|\n|[`universalSelector`](#universalselector)|A [universal selector](https://www.w3.org/TR/css3-selectors/#universal-selector).|`*`|\n\n## Fields\n\nTokens have fields that describe additional information about the token. Fields are [token type](#token-types) specific.\n\n### `adjacentSiblingCombinator`\n\n|Name|Description|Example|\n|---|---|---|\n|`type`|Name of the token type.|\"adjacentSiblingCombinator\"|\n\n### `attributePresenceSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Name of the element attribute.|\"qux\" in `[qux]`|\n|`type`|Name of the token type.|\"attributePresenceSelector\"|\n\n### `attributeValueSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Name of the element attribute.|\"qux\" in `[qux]`|\n|`operator`|Operator of the expression.|\"\\*=\" in `[qux*=val]`|\n|`type`|Name of the token type.|\"attributeValueSelector\"|\n|`value`|Value of the expression.|\"val\" in `[qux=val]`|\n\n### `childCombinator`\n\n|Name|Description|Example|\n|---|---|---|\n|`type`|Name of the token type.|\"childCombinator\"|\n\n### `classSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Class name.|\"baz\" in `.baz[qux]`|\n|`type`|Name of the token type.|\"classSelector\"|\n\n### `descendantCombinator`\n\n|Name|Description|Example|\n|---|---|---|\n|`type`|Name of the token type.|\"descendantCombinator\"|\n\n### `generalSiblingCombinator`\n\n|Name|Description|Example|\n|---|---|---|\n|`type`|Name of the token type.|\"generalSiblingCombinator\"|\n\n### `idSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Name of the ID.|\"bar\" in `#bar:corge()`|\n|`type`|Name of the token type.|\"idSelector\"|\n\n### `pseudoClassSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Name of the pseudo-class.|\"corge\" in `#bar:corge()`|\n|`parameters`|Array of parameter values.|\"var0\", \"var1\" and \"var2\" in `:corge(var0, 'var1', \"var2\")`|\n|`type`|Name of the token type.|\"pseudoClassSelector\"|\n\n### `pseudoElementSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Name of the pseudo-element.|\"grault\" in `#bar::grault`|\n|`type`|Name of the token type.|\"pseudoElementSelector\"|\n\n### `typeSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Name of the node.|\"foo\" in `foo#bar.baz`|\n|`type`|Name of the token type.|\"typeSelector\"|\n\n### `universalSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`type`|Name of the token type.|\"universalSelector\"|\n\n## Development\n\n```bash\ngit pull git@github.com:gajus/scalpel.git\ncd ./scalpel\nnpm install\nnpm run test\n```\n\nThe parser grammar is in the [`./src/grammar.ne`](./src/grammar.ne) file. After making changes to the parser grammar, you need to compile the parser using `npm run compile-grammar` command.\n\n> Note:\n>\n> This parser could be extended to support the entire CSS grammar.\n> I don't have such a use case. However, should you want to add new grammar, [raise an issue](https://github.com/gajus/scalpel/issues/new).\n\n* [Usage](#usage)\n* [Token types](#token-types)\n* [Fields](#fields)\n  * [`adjacentSiblingCombinator`](#adjacentsiblingcombinator)\n  * [`attributePresenceSelector`](#attributepresenceselector)\n  * [`attributeValueSelector`](#attributevalueselector)\n  * [`childCombinator`](#childcombinator)\n  * [`classSelector`](#classselector)\n  * [`descendantCombinator`](#descendantcombinator)\n  * [`generalSiblingCombinator`](#generalsiblingcombinator)\n  * [`idSelector`](#idselector)\n  * [`pseudoClassSelector`](#pseudoclassselector)\n  * [`pseudoElementSelector`](#pseudoelementselector)\n  * [`typeSelector`](#typeselector)\n  * [`universalSelector`](#universalselector)\n* [Development](#development)\n\n## Usage\n\n```js\nimport {\n  createGenerator,\n  createParser\n} from 'scalpel';\n\nconst generator = createGenerator();\nconst parser = createParser();\n\nconst tokens: Array<SelectorTokenType | CombinatorTokenType> = parser.parse('.foo.bar');\n\n// [\n//   {\n//     type: 'selector',\n//     body: [\n//       {\n//         type: 'classSelector',\n//         name: 'foo'\n//       },\n//       {\n//         type: 'classSelector',\n//         name: 'bar'\n//       }\n//     ]\n//   }\n// ]\n\nconst selector: string = generator.generate(token);\n\n// .foo.bar\n\n```\n\n> Note:\n>\n> For programmatic type definitions, refer to [`./src/types.js`](./src/types.js).\n\n## Token types\n\n|Type|Description|Example|\n|---|---|---|\n|[`adjacentSiblingCombinator`](#adjacentsiblingcombinator)|An [adjacent sibling combinator](https://www.w3.org/TR/css3-selectors/#adjacent-sibling-combinators).|`.baz0 + .baz1`|\n|[`attributePresenceSelector`](#attributepresenceselector)|An [attribute presence selector](https://www.w3.org/TR/css3-selectors/#attribute-selectors).|`[qux]`|\n|[`attributeValueSelector`](#attributevalueselector)|An [attribute value selector](https://www.w3.org/TR/css3-selectors/#attribute-selectors).|`[qux=val]`, `[qux~=val]`|\n|[`childCombinator`](#childcombinator)|A [child combinator](https://www.w3.org/TR/css3-selectors/#child-combinators).|`.baz0 > .baz1`|\n|[`classSelector`](#classselector)|A [class selector](https://www.w3.org/TR/css3-selectors/#class-html).|`.baz`|\n|[`descendantCombinator`](#descendantcombinator)|A [descendant combinator](https://www.w3.org/TR/css3-selectors/#descendant-combinators).|`.baz0 .baz1`|\n|[`generalSiblingCombinator`](#generalsiblingcombinator)|A [general sibling combinator](https://www.w3.org/TR/css3-selectors/#general-sibling-combinators).|`.baz0 ~ .baz1`|\n|[`idSelector`](#idselector)|An [ID selector](https://www.w3.org/TR/css3-selectors/#id-selectors)|`#bar`|\n|[`pseudoClassSelector`](#pseudoclassselector)|A [pseudo-class selector](https://www.w3.org/TR/css3-selectors/#pseudo-classes).|`:corge`, `:corge()`, `:corge(val0, 'val1', \"val2\")`|\n|[`pseudoElementSelector`](#pseudoelementselector)|A [pseudo-element selector](https://www.w3.org/TR/css3-selectors/#pseudo-elements).|`::grault`|\n|[`typeSelector`](#typeselector)|A [type selector](https://www.w3.org/TR/css3-selectors/#type-selectors).|`foo`|\n|[`universalSelector`](#universalselector)|A [universal selector](https://www.w3.org/TR/css3-selectors/#universal-selector).|`*`|\n\n## Fields\n\nTokens have fields that describe additional information about the token. Fields are [token type](#token-types) specific.\n\n### `adjacentSiblingCombinator`\n\n|Name|Description|Example|\n|---|---|---|\n|`type`|Name of the token type.|\"adjacentSiblingCombinator\"|\n\n### `attributePresenceSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Name of the element attribute.|\"qux\" in `[qux]`|\n|`type`|Name of the token type.|\"attributePresenceSelector\"|\n\n### `attributeValueSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Name of the element attribute.|\"qux\" in `[qux]`|\n|`operator`|Operator of the expression.|\"\\*=\" in `[qux*=val]`|\n|`type`|Name of the token type.|\"attributeValueSelector\"|\n|`value`|Value of the expression.|\"val\" in `[qux=val]`|\n\n### `childCombinator`\n\n|Name|Description|Example|\n|---|---|---|\n|`type`|Name of the token type.|\"childCombinator\"|\n\n### `classSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Class name.|\"baz\" in `.baz[qux]`|\n|`type`|Name of the token type.|\"classSelector\"|\n\n### `descendantCombinator`\n\n|Name|Description|Example|\n|---|---|---|\n|`type`|Name of the token type.|\"descendantCombinator\"|\n\n### `generalSiblingCombinator`\n\n|Name|Description|Example|\n|---|---|---|\n|`type`|Name of the token type.|\"generalSiblingCombinator\"|\n\n### `idSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Name of the ID.|\"bar\" in `#bar:corge()`|\n|`type`|Name of the token type.|\"idSelector\"|\n\n### `pseudoClassSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Name of the pseudo-class.|\"corge\" in `#bar:corge()`|\n|`parameters`|Array of parameter values.|\"var0\", \"var1\" and \"var2\" in `:corge(var0, 'var1', \"var2\")`|\n|`type`|Name of the token type.|\"pseudoClassSelector\"|\n\n### `pseudoElementSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Name of the pseudo-element.|\"grault\" in `#bar::grault`|\n|`type`|Name of the token type.|\"pseudoElementSelector\"|\n\n### `typeSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Name of the node.|\"foo\" in `foo#bar.baz`|\n|`type`|Name of the token type.|\"typeSelector\"|\n\n### `universalSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`type`|Name of the token type.|\"universalSelector\"|\n\n## Development\n\n```bash\ngit pull git@github.com:gajus/scalpel.git\ncd ./scalpel\nnpm install\nnpm run test\n```\n\nThe parser grammar is in the [`./src/grammar.ne`](./src/grammar.ne) file. After making changes to the parser grammar, you need to compile the parser using `npm run compile-grammar` command.\n\n> Note:\n>\n> This parser could be extended to support the entire CSS grammar.\n> I don't have such a use case. However, should you want to add new grammar, [raise an issue](https://github.com/gajus/scalpel/issues/new).\n\n* [Usage](#usage)\n* [Token types](#token-types)\n* [Fields](#fields)\n  * [`adjacentSiblingCombinator`](#adjacentsiblingcombinator)\n  * [`attributePresenceSelector`](#attributepresenceselector)\n  * [`attributeValueSelector`](#attributevalueselector)\n  * [`childCombinator`](#childcombinator)\n  * [`classSelector`](#classselector)\n  * [`descendantCombinator`](#descendantcombinator)\n  * [`generalSiblingCombinator`](#generalsiblingcombinator)\n  * [`idSelector`](#idselector)\n  * [`pseudoClassSelector`](#pseudoclassselector)\n  * [`pseudoElementSelector`](#pseudoelementselector)\n  * [`typeSelector`](#typeselector)\n  * [`universalSelector`](#universalselector)\n* [Development](#development)\n\n## Usage\n\n```js\nimport {\n  createGenerator,\n  createParser\n} from 'scalpel';\n\nconst generator = createGenerator();\nconst parser = createParser();\n\nconst tokens: Array<SelectorTokenType | CombinatorTokenType> = parser.parse('.foo.bar');\n\n// [\n//   {\n//     type: 'selector',\n//     body: [\n//       {\n//         type: 'classSelector',\n//         name: 'foo'\n//       },\n//       {\n//         type: 'classSelector',\n//         name: 'bar'\n//       }\n//     ]\n//   }\n// ]\n\nconst selector: string = generator.generate(token);\n\n// .foo.bar\n\n```\n\n> Note:\n>\n> For programmatic type definitions, refer to [`./src/types.js`](./src/types.js).\n\n## Token types\n\n|Type|Description|Example|\n|---|---|---|\n|[`adjacentSiblingCombinator`](#adjacentsiblingcombinator)|An [adjacent sibling combinator](https://www.w3.org/TR/css3-selectors/#adjacent-sibling-combinators).|`.baz0 + .baz1`|\n|[`attributePresenceSelector`](#attributepresenceselector)|An [attribute presence selector](https://www.w3.org/TR/css3-selectors/#attribute-selectors).|`[qux]`|\n|[`attributeValueSelector`](#attributevalueselector)|An [attribute value selector](https://www.w3.org/TR/css3-selectors/#attribute-selectors).|`[qux=val]`, `[qux~=val]`|\n|[`childCombinator`](#childcombinator)|A [child combinator](https://www.w3.org/TR/css3-selectors/#child-combinators).|`.baz0 > .baz1`|\n|[`classSelector`](#classselector)|A [class selector](https://www.w3.org/TR/css3-selectors/#class-html).|`.baz`|\n|[`descendantCombinator`](#descendantcombinator)|A [descendant combinator](https://www.w3.org/TR/css3-selectors/#descendant-combinators).|`.baz0 .baz1`|\n|[`generalSiblingCombinator`](#generalsiblingcombinator)|A [general sibling combinator](https://www.w3.org/TR/css3-selectors/#general-sibling-combinators).|`.baz0 ~ .baz1`|\n|[`idSelector`](#idselector)|An [ID selector](https://www.w3.org/TR/css3-selectors/#id-selectors)|`#bar`|\n|[`pseudoClassSelector`](#pseudoclassselector)|A [pseudo-class selector](https://www.w3.org/TR/css3-selectors/#pseudo-classes).|`:corge`, `:corge()`, `:corge(val0, 'val1', \"val2\")`|\n|[`pseudoElementSelector`](#pseudoelementselector)|A [pseudo-element selector](https://www.w3.org/TR/css3-selectors/#pseudo-elements).|`::grault`|\n|[`typeSelector`](#typeselector)|A [type selector](https://www.w3.org/TR/css3-selectors/#type-selectors).|`foo`|\n|[`universalSelector`](#universalselector)|A [universal selector](https://www.w3.org/TR/css3-selectors/#universal-selector).|`*`|\n\n## Fields\n\nTokens have fields that describe additional information about the token. Fields are [token type](#token-types) specific.\n\n### `adjacentSiblingCombinator`\n\n|Name|Description|Example|\n|---|---|---|\n|`type`|Name of the token type.|\"adjacentSiblingCombinator\"|\n\n### `attributePresenceSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Name of the element attribute.|\"qux\" in `[qux]`|\n|`type`|Name of the token type.|\"attributePresenceSelector\"|\n\n### `attributeValueSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Name of the element attribute.|\"qux\" in `[qux]`|\n|`operator`|Operator of the expression.|\"\\*=\" in `[qux*=val]`|\n|`type`|Name of the token type.|\"attributeValueSelector\"|\n|`value`|Value of the expression.|\"val\" in `[qux=val]`|\n\n### `childCombinator`\n\n|Name|Description|Example|\n|---|---|---|\n|`type`|Name of the token type.|\"childCombinator\"|\n\n### `classSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Class name.|\"baz\" in `.baz[qux]`|\n|`type`|Name of the token type.|\"classSelector\"|\n\n### `descendantCombinator`\n\n|Name|Description|Example|\n|---|---|---|\n|`type`|Name of the token type.|\"descendantCombinator\"|\n\n### `generalSiblingCombinator`\n\n|Name|Description|Example|\n|---|---|---|\n|`type`|Name of the token type.|\"generalSiblingCombinator\"|\n\n### `idSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Name of the ID.|\"bar\" in `#bar:corge()`|\n|`type`|Name of the token type.|\"idSelector\"|\n\n### `pseudoClassSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Name of the pseudo-class.|\"corge\" in `#bar:corge()`|\n|`parameters`|Array of parameter values.|\"var0\", \"var1\" and \"var2\" in `:corge(var0, 'var1', \"var2\")`|\n|`type`|Name of the token type.|\"pseudoClassSelector\"|\n\n### `pseudoElementSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Name of the pseudo-element.|\"grault\" in `#bar::grault`|\n|`type`|Name of the token type.|\"pseudoElementSelector\"|\n\n### `typeSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`name`|Name of the node.|\"foo\" in `foo#bar.baz`|\n|`type`|Name of the token type.|\"typeSelector\"|\n\n### `universalSelector`\n\n|Name|Description|Example|\n|---|---|---|\n|`type`|Name of the token type.|\"universalSelector\"|\n\n## Development\n\n```bash\ngit pull git@github.com:gajus/scalpel.git\ncd ./scalpel\nnpm install\nnpm run test\n```\n\nThe parser grammar is in the [`./src/grammar.ne`](./src/grammar.ne) file. After making changes to the parser grammar, you need to compile the parser using `npm run compile-grammar` command.\n",
    "licenseText": "Copyright (c) 2017, Gajus Kuizinas (http://gajus.com/)\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the Gajus Kuizinas (http://gajus.com/) nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ANUARY BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/rst-selector-parser/-/rst-selector-parser-2.2.3.tgz#81b230ea2fcc6066c89e3472de794285d9b03d91",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/rst-selector-parser/-/rst-selector-parser-2.2.3.tgz",
    "hash": "81b230ea2fcc6066c89e3472de794285d9b03d91",
    "integrity": "sha1-gbIw6i/MYGbInjRy3nlChdmwPZE=",
    "registry": "npm",
    "packageName": "rst-selector-parser"
  },
  "registry": "npm",
  "hash": "81b230ea2fcc6066c89e3472de794285d9b03d91"
}