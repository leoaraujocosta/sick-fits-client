{
  "manifest": {
    "name": "waait",
    "version": "1.0.2",
    "description": "A little function to wait",
    "repository": {
      "type": "git",
      "url": "https://github.com/wesbos/waait.git"
    },
    "main": "index.js",
    "author": {
      "name": "Wes Bos"
    },
    "license": "ISC",
    "devDependencies": {
      "tape": "^4.9.0"
    },
    "scripts": {
      "test": "node test.js"
    },
    "_registry": "npm",
    "_loc": "yarn-cache/v4/npm-waait-1.0.2-c234ed748a032cb7d5e83cb691567c6dc545b37d/node_modules/waait/package.json",
    "readmeFilename": "readme.md",
    "readme": "[![build status](https://api.travis-ci.org/wesbos/waait.svg?branch=master)](https://travis-ci.org/wesbos/waait/)\n\n# Waait\n\nHold on a sec, or 7.\n\n`wait()` Returns a promise that resolves after how many milliseconds you pass it.\n\nGreat for waiting any amount of time. If you do not pass it any value, it will immediately resolve. This is handy when you need to ensure the following code is put at the end of the JS event callstack.\n\n## Usage\n\n```js\nimport wait from 'waait';\n\nasync function doStuff() {\n  doSomething();\n  await wait();\n  doSomethingElse();\n  await wait(200);\n  console.log('200ms later');\n}\n\n```\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/waait/-/waait-1.0.2.tgz#c234ed748a032cb7d5e83cb691567c6dc545b37d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/waait/-/waait-1.0.2.tgz",
    "hash": "c234ed748a032cb7d5e83cb691567c6dc545b37d",
    "integrity": "sha512-amvD7uRx48U2gXOgzwV7PbcpSy8O3Fect2SqiLbBIVH9Zh0UMnDWckSLnsdKNwq7pvarWnPWrpYad2P3pgmRYw==",
    "registry": "npm",
    "packageName": "waait"
  },
  "registry": "npm",
  "hash": "c234ed748a032cb7d5e83cb691567c6dc545b37d"
}