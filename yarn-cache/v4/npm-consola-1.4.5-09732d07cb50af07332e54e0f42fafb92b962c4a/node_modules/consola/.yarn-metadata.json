{
  "manifest": {
    "name": "consola",
    "version": "1.4.5",
    "description": "Elegant Console Logger",
    "main": "./dist/consola.cjs.js",
    "module": "./src/index.js",
    "scripts": {
      "build": "bili",
      "test": "true",
      "prepublish": "yarn build",
      "release": "standard-version && yarn build && git push --follow-tags && npm publish"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/nuxt/consola.git"
    },
    "files": [
      "dist",
      "src",
      "index.js"
    ],
    "keywords": [
      "console",
      "logger",
      "reporter",
      "elegant",
      "cli",
      "universal",
      "unified",
      "winston"
    ],
    "author": {
      "name": "Pooya Parsa",
      "email": "pooya@pi0.ir"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/nuxt/consola/issues"
    },
    "homepage": "https://github.com/nuxt/consola#readme",
    "dependencies": {
      "chalk": "^2.3.2",
      "figures": "^2.0.0",
      "lodash": "^4.17.5",
      "std-env": "^1.1.0"
    },
    "devDependencies": {
      "bili": "^3.0.14",
      "eslint": "^4.17.0",
      "eslint-config-standard": "11.0.0",
      "eslint-plugin-import": "^2.11.0",
      "eslint-plugin-jest": "latest",
      "eslint-plugin-node": "6.0.1",
      "eslint-plugin-promise": "latest",
      "eslint-plugin-standard": "latest",
      "eslint-plugin-vue": "latest",
      "esm": "^3.0.14",
      "standard-version": "^4.3.0",
      "winston": "^3.0.0-rc3"
    },
    "_registry": "npm",
    "_loc": "yarn-cache/v4/npm-consola-1.4.5-09732d07cb50af07332e54e0f42fafb92b962c4a/node_modules/consola/package.json",
    "readmeFilename": "README.md",
    "readme": "# Consola\n\nElegant Console Logger\n\n## Why Consola?\n\n- Easy to use\n- Fancy output with Fallback for Continuous Integration (CI) environments\n- Global mockable stdout/stderr wrapper\n- Pluggable reporters\n- Consistent Command Line Interface (CLI) experience\n- Scoped Loggers\n\n## Installation\n\nUsing yarn:\n\n```bash\nyarn add consola\n```\n\nUsing npm:\n\n```bash\nnpm i consola\n```\n\n## Getting started\n\n```js\nconst consola = require('consola')\n\n// See types section for all available types\nconsola.start('Starting build')\nconsola.success('Built!')\nconsola.info('Reporter: Some info')\nconsola.error(new Error('Foo'))\n```\n\n<div align=\"center\">\n<br>\n<img src=\"./assets/screen1.png\" width=\"600px\">\n<p>Fancy Reporter</p>\n<br>\n</div>\n\n<pre>\n[2:17:17 PM] Starting build\n[2:17:17 PM] [TEST] Log from test scope\n[2:17:18 PM] Built!\n[2:17:18 PM] Some info\n[2:17:18 PM] Error: Foo\n</pre>\n<div align=\"center\">\n<p>Minimal Reporter (CI)</p>\n<br>\n</div>\n\n## Scoped Loggers\n\nGroup logs using a scope:\n\n```js\nconst logger = consola.withScope('test')\n\nlogger.info('Log from test scope') // [Test] Log from test scope\n```\n\n## Reporters\n\nChoose between one of the built-in reporters or bring own reporter.\n\nBy default `FancyReporter` is registered for modern terminals or `BasicReporter` will be used if running in limited environments such as CIs.\n\nAvailable reporters:\n\n- [BasicReporter](./src/reporters/basic.js)\n- [FancyReporter](./src/reporters/fancy.js)\n- [JSONReporter](./src/reporters/json.js)\n- [WinstonReporter](./src/reporters/winston.js)\n\nPlease see [Examples](./examples) for usage info.\n\n### Creating your own reporter\n\nA reporter (Class or Object) exposes `log(logObj)` method.\nTo write a reporter, check implementations to get an idea.\n\n## Types\n\nTypes can be treated as _extended logging levels_ in Consola's world.\n\nA list of all available default types is [here](./src/types.js).\n\n## Creating a new instance\n\nConsola has a global instance and is recommended to use everywhere.\nIn case more control is needed, create a new instance.\n\n```js\nconst { Consola, BasicReporter } = require('consola')\n\n\nconst consola = new Consola({\n    level: 30,\n    reporters: [],\n    types: []\n})\n\nconsola.add(BasicReporter)\n```\n\n## API\n\n- `consola.<type>([logObj|message|error])`\n\nLog to all reporters. If a plain string or error is given, then the message will be automatically translated to a logObject.\n\n- `add(reporter)`\n\nRegister a custom reporter instance.\n\n- `remove(reporter)`\n\nRemove a registered reporter.\n\n- `clear()`\n\nRemove all current reporters (Useful for writing tests).\n\n- `withDefaults(defaults)`\n\nCreate a wrapper interface with all types available and `defaults` applied to all logs.\n\n- `withScope(scope)`\n\nShortcut to `withDefaults({ scope })`.\n\n- `level`\n\nThe level to display logs. Any logs at or above this level will be displayed.  \nList of available levels [here](./src/types.js)\n\n## logObject\n\nlogObject is a free-to-extend object which will be passed to reporters.\n\nHere are standard possible fields:\n\nCommon fields:\n\n- `message`\n- `date`\n- `scope`\n\nExtended fields:\n\n- `clear`\n- `badge`\n- `additional`\n- `additionalStyle` (By default: `grey`)\n- `icon` (Default depends on log type)\n\n## Integrations\n\n### With jest\n\n```js\nconsola.clear().add({\n  log: jest.fn()\n})\n```\n\n### With jsdom\n\n```js\n{\n  virtualConsole: new jsdom.VirtualConsole().sendTo(consola)\n}\n```\n\n## License\n\nMIT\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/consola/-/consola-1.4.5.tgz#09732d07cb50af07332e54e0f42fafb92b962c4a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/consola/-/consola-1.4.5.tgz",
    "hash": "09732d07cb50af07332e54e0f42fafb92b962c4a",
    "integrity": "sha512-movqq3MbyXbSf7cG/x+EbO3VjKQVZPB/zeB5+lN1TuBYh9BWDemLQca9P+a4xpO4lXva9rz+Bd8XyqlH136Lww==",
    "registry": "npm",
    "packageName": "consola"
  },
  "registry": "npm",
  "hash": "09732d07cb50af07332e54e0f42fafb92b962c4a"
}