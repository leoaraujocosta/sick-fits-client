{
  "manifest": {
    "name": "jest-leak-detector",
    "version": "23.6.0",
    "repository": {
      "type": "git",
      "url": "https://github.com/facebook/jest.git"
    },
    "license": "MIT",
    "main": "build/index.js",
    "dependencies": {
      "pretty-format": "^23.6.0"
    },
    "devDependencies": {
      "weak": "^1.0.1"
    },
    "_registry": "npm",
    "_loc": "yarn-cache/v4/npm-jest-leak-detector-23.6.0-e4230fd42cf381a1a1971237ad56897de7e171de/node_modules/jest-leak-detector/package.json",
    "readmeFilename": "README.md",
    "readme": "# jest-leak-detector\n\nModule for verifying whether an object has been garbage collected or not.\n\nInternally creates a weak reference to the object, and forces garbage collection to happen. If the reference is gone, it meant no one else was pointing to the object.\n\n## Example\n\n```javascript\nlet reference = {};\n\nconst detector = new LeakDetector(reference);\n\n// Reference is held in memory.\nconsole.log(detector.isLeaked()); // true\n\n// We destroy the only reference to the object.\nreference = null;\n\n// Reference is gone.\nconsole.log(detector.isLeaked()); // false\n```\n",
    "description": "Module for verifying whether an object has been garbage collected or not."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/jest-leak-detector/-/jest-leak-detector-23.6.0.tgz#e4230fd42cf381a1a1971237ad56897de7e171de",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/jest-leak-detector/-/jest-leak-detector-23.6.0.tgz",
    "hash": "e4230fd42cf381a1a1971237ad56897de7e171de",
    "integrity": "sha512-f/8zA04rsl1Nzj10HIyEsXvYlMpMPcy0QkQilVZDFOaPbv2ur71X5u2+C4ZQJGyV/xvVXtCCZ3wQ99IgQxftCg==",
    "registry": "npm",
    "packageName": "jest-leak-detector"
  },
  "registry": "npm",
  "hash": "e4230fd42cf381a1a1971237ad56897de7e171de"
}