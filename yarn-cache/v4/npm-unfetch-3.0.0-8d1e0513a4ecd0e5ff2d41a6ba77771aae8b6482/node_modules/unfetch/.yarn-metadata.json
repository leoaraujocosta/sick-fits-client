{
  "manifest": {
    "name": "unfetch",
    "version": "3.0.0",
    "description": "Bare minimum fetch polyfill in 500 bytes",
    "main": "dist/unfetch.js",
    "module": "dist/unfetch.es.js",
    "jsnext:main": "dist/unfetch.es.js",
    "umd:main": "dist/unfetch.umd.js",
    "scripts": {
      "test": "eslint src test && mocha --compilers js:babel-register test/**/*.js",
      "build": "npm-run-all --silent clean -p rollup:* -p minify:* -s size",
      "clean": "rimraf dist && mkdirp dist",
      "rollup:cjs": "cross-env FORMAT=cjs rollup -c rollup.config.js -f cjs -n $npm_package_name -o $npm_package_main",
      "rollup:umd": "cross-env FORMAT=umd rollup -c rollup.config.js -f umd -n $npm_package_name -o $npm_package_umd_main",
      "rollup:esm": "rollup -c rollup.config.js -f es -n $npm_package_name -o $npm_package_module",
      "minify:cjs": "uglifyjs $npm_package_main -cm toplevel -o $npm_package_main -p relative --in-source-map ${npm_package_main}.map --source-map ${npm_package_main}.map",
      "minify:umd": "uglifyjs $npm_package_umd_main -cm -o $npm_package_umd_main -p relative --in-source-map ${npm_package_umd_main}.map --source-map ${npm_package_umd_main}.map",
      "size": "echo \"Gzipped Size: $(strip-json-comments --no-whitespace $npm_package_main | gzip-size)\"",
      "prepublish": "npm run -s build",
      "release": "npm run build -s && git commit -am $npm_package_version && git tag $npm_package_version && git push && git push --tags && npm publish"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/developit/unfetch.git"
    },
    "keywords": [
      "fetch",
      "polyfill",
      "xhr",
      "ajax"
    ],
    "homepage": "https://github.com/developit/unfetch",
    "authors": [
      "Jason Miller <jason@developit.ca>"
    ],
    "license": "MIT",
    "files": [
      "src",
      "dist",
      "polyfill.js"
    ],
    "eslintConfig": {
      "parser": "babel-eslint",
      "extends": "eslint:recommended",
      "env": {
        "browser": true,
        "mocha": true,
        "node": true,
        "es6": true
      },
      "globals": {
        "expect": true
      }
    },
    "devDependencies": {
      "babel-core": "^6.9.1",
      "babel-eslint": "^7.1.1",
      "babel-preset-es2015": "^6.9.0",
      "babel-preset-stage-0": "^6.5.0",
      "babel-register": "^6.9.0",
      "chai": "^3.5.0",
      "cross-env": "^3.1.4",
      "eslint": "^3.13.1",
      "gzip-size-cli": "^1.0.0",
      "mkdirp": "^0.5.1",
      "mocha": "^3.2.0",
      "npm-run-all": "^2.1.1",
      "rimraf": "^2.5.2",
      "rollup": "^0.41.4",
      "rollup-plugin-buble": "^0.15.0",
      "rollup-plugin-post-replace": "^1.0.0",
      "sinon": "^1.17.4",
      "sinon-chai": "^2.8.0",
      "strip-json-comments-cli": "^1.0.1",
      "uglify-js": "^2.6.2"
    },
    "_registry": "npm",
    "_loc": "yarn-cache/v4/npm-unfetch-3.0.0-8d1e0513a4ecd0e5ff2d41a6ba77771aae8b6482/node_modules/unfetch/package.json",
    "readmeFilename": "README.md",
    "readme": "<p align=\"center\">\n  <img src=\"https://i.imgur.com/JaXEFNp.png\" width=\"300\" height=\"300\" alt=\"unfetch\">\n  <br>\n  <a href=\"https://www.npmjs.org/package/unfetch\"><img src=\"https://img.shields.io/npm/v/unfetch.svg?style=flat\" alt=\"npm\"></a> <a href=\"https://travis-ci.org/developit/unfetch\"><img src=\"https://travis-ci.org/developit/unfetch.svg?branch=master\" alt=\"travis\"></a>\n</p>\n\n# unfetch\n\n> Tiny 500b fetch \"barely-polyfill\"\n\n-   **Tiny:** under **500 bytes** of [ES3](https://unpkg.com/unfetch) gzipped\n-   **Minimal:** just `fetch()` with headers and text/json responses\n-   **Familiar:** a subset of the full API\n-   **Supported:** supports IE8+ _(assuming `Promise` is polyfilled of course!)_\n-   **Standalone:** one function, no dependencies\n-   **Modern:** written in ES2015, transpiled to 500b of old-school JS\n\n> 🤔 **What's Missing?**\n>\n> -   Uses simple Arrays instead of Iterables, since Arrays _are_ iterables\n> -   No streaming, just Promisifies existing XMLHttpRequest response bodies\n\n* * *\n\n## Table of Contents\n\n-   [Install](#install)\n-   [Usage](#usage)\n-   [Examples & Demos](#examples--demos)\n-   [API](#api)\n-   [Caveats](#caveats)\n-   [Contribute](#contribute)\n-   [License](#license)\n\n* * *\n\n## Install\n\nThis project uses [node](http://nodejs.org) and [npm](https://npmjs.com). Go check them out if you don't have them locally installed.\n\n```sh\n$ npm install --save unfetch\n```\n\nThen with a module bundler like [rollup](http://rollupjs.org/) or [webpack](https://webpack.js.org/), use as you would anything else:\n\n```javascript\n// using ES6 modules\nimport fetch from 'unfetch'\n\n// using CommonJS modules\nvar fetch = require('unfetch')\n```\n\nThe [UMD](https://github.com/umdjs/umd) build is also available on [unpkg](https://unpkg.com):\n\n```html\n<script src=\"//unpkg.com/unfetch/dist/unfetch.umd.js\"></script>\n```\n\nThis exposes the `unfetch()` function as a global.\n\n* * *\n\n## Usage\n\nAs a [**ponyfill**](https://ponyfill.com):\n\n```js\nimport fetch from 'unfetch';\n\nfetch('/foo.json')\n  .then( r => r.json() )\n  .then( data => {\n    console.log(data);\n  });\n```\n\nGlobally, as a [**polyfill**](https://ponyfill.com/#polyfill):\n\n```js\nimport 'unfetch/polyfill';\n\n// \"fetch\" is now installed globally if it wasn't already available\n\nfetch('/foo.json')\n  .then( r => r.json() )\n  .then( data => {\n    console.log(data);\n  });\n```\n\n## Examples & Demos\n\n[**Real Example on JSFiddle**](https://jsfiddle.net/developit/qrh7tLc0/) ➡️\n\n```js\n// simple GET request:\nfetch('/foo')\n  .then( r => r.text() )\n  .then( txt => console.log(txt) )\n\n\n// complex POST request with JSON, headers:\nfetch('/bear', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({ hungry: true })\n}).then( r => {\n  open(r.headers.get('location'));\n  return r.json();\n})\n```\n\n## API\nWhile one of Unfetch's goals is to provide a familiar interface, it's API may differ from other `fetch` polyfills/ponyfills. \nOne of the key differences is that Unfetch focuses on implementing the [`fetch()` API](https://fetch.spec.whatwg.org/#fetch-api), while offering minimal (yet functional) support to the other sections of the [Fetch spec](https://fetch.spec.whatwg.org/), like the [Headers class](https://fetch.spec.whatwg.org/#headers-class) or the [Response class](https://fetch.spec.whatwg.org/#response-class).\nUnfetch's API is organized as follows:\n\n### `fetch(url: string, options: Object)`\nThis function is the heart of Unfetch. It will fetch resources from `url` according to the given `options`, returning a Promise that will eventually resolve to the response.\n\nUnfetch will account for the following properties in `options`:\n  \n  * `method`: Indicates the request method to be performed on the\n   target resource (The most common ones being `GET`, `POST`, `PUT`, `PATCH`, `HEAD`, `OPTIONS` or `DELETE`).\n  * `headers`: An `Object` containing additional information to be sent with the request, e.g. `{ 'Content-Type': 'application/json' }` to indicate a JSON-typed request body.\n  * `credentials`: ⚠ Accepts a `\"include\"` string, which will allow both CORS and same origin requests to work with cookies. As pointed in the ['Caveats' section](#caveats), Unfetch won't send or receive cookies otherwise. The `\"same-origin\"` value is not supported. ⚠\n  * `body`: The content to be transmited in request's body. Common content types include `FormData`, `JSON`, `Blob`, `ArrayBuffer` or plain text.\n\n### `response` Methods and Attributes\nThese methods are used to handle the response accordingly in your Promise chain. Instead of implementing full spec-compliant [Response Class](https://fetch.spec.whatwg.org/#response-class) functionality, Unfetch provides the following methods and attributes:\n\n#### `response.ok`\nReturns `true` if the request received a status in the `OK` range (200-299).\n\n#### `response.status`\nContains the status code of the response, e.g. `404` for a not found resource, `200` for a success.\n\n#### `response.statusText`\nA message related to the `status` attribute, e.g. `OK` for a status `200`.\n\n#### `response.clone()`\nWill return another `Object` with the same shape and content as `response`.\n\n#### `response.text()`, `response.json()`, `response.blob()`\nWill return the response content as plain text, JSON and `Blob`, respectively.\n\n#### `response.headers`\nAgain, Unfetch doesn't implement a full spec-compliant [`Headers Class`](https://fetch.spec.whatwg.org/#headers), emulating some of the Map-like functionality through its own functions:\n  * `headers.keys`: Returns an `Array` containing the `key` for every header in the response.\n  * `headers.entries`: Returns an `Array` containing the `[key, value]` pairs for every `Header` in the response.\n  * `headers.get(key)`: Returns the `value` associated with the given `key`.\n  * `headers.has(key)`: Returns a `boolean` asserting the existence of a `value` for the given `key` among the response headers.\n\n## Caveats\n\n_Adapted from the GitHub fetch polyfill [**readme**](https://github.com/github/fetch#caveats)._\n\nThe `fetch` specification differs from `jQuery.ajax()` in mainly two ways that\nbear keeping in mind:\n\n* By default, `fetch` **won't send or receive any cookies** from the server,\n  resulting in unauthenticated requests if the site relies on maintaining a user\n  session.\n\n```javascript\nfetch('/users', {\n  credentials: 'include'\n});\n```\n\n* The Promise returned from `fetch()` **won't reject on HTTP error status**\n  even if the response is an HTTP 404 or 500. Instead, it will resolve normally,\n  and it will only reject on network failure or if anything prevented the\n  request from completing.\n\n  To have `fetch` Promise reject on HTTP error statuses, i.e. on any non-2xx\n  status, define a custom response handler:\n\n```javascript\nfetch('/users')\n  .then( checkStatus )\n  .then( r => r.json() )\n  .then( data => {\n    console.log(data);\n  });\n\nfunction checkStatus(response) {\n  if (response.ok) {\n    return response;\n  } else {\n    var error = new Error(response.statusText);\n    error.response = response;\n    return Promise.reject(error);\n  }\n}\n```\n\n* * *\n\n## Contribute\n\nFirst off, thanks for taking the time to contribute!\nNow, take a moment to be sure your contributions make sense to everyone else.\n\n### Reporting Issues\n\nFound a problem? Want a new feature? First of all see if your issue or idea has [already been reported](../../issues).\nIf it hasn't, just open a [new clear and descriptive issue](../../issues/new).\n\n### Submitting pull requests\n\nPull requests are the greatest contributions, so be sure they are focused in scope, and do avoid unrelated commits.\n\n> 💁 **Remember: size is the #1 priority.**\n>\n> Every byte counts! PR's can't be merged if they increase the output size much.\n\n-   Fork it!\n-   Clone your fork: `git clone https://github.com/<your-username>/unfetch`\n-   Navigate to the newly cloned directory: `cd unfetch`\n-   Create a new branch for the new feature: `git checkout -b my-new-feature`\n-   Install the tools necessary for development: `npm install`\n-   Make your changes.\n-   `npm run build` to verify your change doesn't increase output size.\n-   `npm test` to make sure your change doesn't break anything.\n-   Commit your changes: `git commit -am 'Add some feature'`\n-   Push to the branch: `git push origin my-new-feature`\n-   Submit a pull request with full remarks documenting your changes.\n\n## License\n\n[MIT License](LICENSE.md) © [Jason Miller](https://jasonformat.com/)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2017 Jason Miller\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/unfetch/-/unfetch-3.0.0.tgz#8d1e0513a4ecd0e5ff2d41a6ba77771aae8b6482",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/unfetch/-/unfetch-3.0.0.tgz",
    "hash": "8d1e0513a4ecd0e5ff2d41a6ba77771aae8b6482",
    "integrity": "sha1-jR4FE6Ts0OX/LUGmund3Gq6LZII=",
    "registry": "npm",
    "packageName": "unfetch"
  },
  "registry": "npm",
  "hash": "8d1e0513a4ecd0e5ff2d41a6ba77771aae8b6482"
}